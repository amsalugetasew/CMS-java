
import com.sun.speech.freetts.Voice;
import com.sun.speech.freetts.VoiceManager;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author gech
 */
public class Register_patient_lab_result extends javax.swing.JFrame {

    /**
     * Creates new form Register_patient_lab_result
     */
    private static final String voicename = "kevin16";

    public Register_patient_lab_result(String x, String y, String z) {
        initComponents();
        display.setText(x);
        displayp.setText(y);
        infoid.setText(z);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jLabel23 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        rmnm = new javax.swing.JComboBox();
        id = new javax.swing.JTextField();
        pn = new javax.swing.JTextField();
        opo = new javax.swing.JTextField();
        se1 = new javax.swing.JComboBox();
        cr = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        crtr = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        rm = new javax.swing.JTextArea();
        call = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        callagain = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtarea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        display = new javax.swing.JLabel();
        displayp = new javax.swing.JLabel();
        infoid = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1112, 693));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jDesktopPane1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel23.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel23.setText(" REMARK");
        jDesktopPane1.add(jLabel23);
        jLabel23.setBounds(30, 400, 100, 30);

        jLabel25.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel25.setText("TEST RESULT");
        jDesktopPane1.add(jLabel25);
        jLabel25.setBounds(30, 350, 140, 30);

        jLabel19.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel19.setText("SUB  TYPE");
        jDesktopPane1.add(jLabel19);
        jLabel19.setBounds(30, 300, 160, 30);

        jLabel18.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel18.setText(" MAIN TEST TYPE");
        jDesktopPane1.add(jLabel18);
        jLabel18.setBounds(30, 250, 130, 30);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText(" OPO");
        jDesktopPane1.add(jLabel2);
        jLabel2.setBounds(40, 200, 70, 23);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setText("PATIENT NAME");
        jDesktopPane1.add(jLabel3);
        jLabel3.setBounds(30, 150, 100, 22);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("  PATIENT ID NUMBER");
        jDesktopPane1.add(jLabel1);
        jLabel1.setBounds(30, 100, 160, 23);

        rmnm.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PLEASE SELECT ROOM NUMBER", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" }));
        rmnm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmnmActionPerformed(evt);
            }
        });
        jDesktopPane1.add(rmnm);
        rmnm.setBounds(470, 40, 250, 30);

        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });
        jDesktopPane1.add(id);
        id.setBounds(200, 90, 275, 35);

        pn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pnActionPerformed(evt);
            }
        });
        jDesktopPane1.add(pn);
        pn.setBounds(200, 140, 275, 38);
        jDesktopPane1.add(opo);
        opo.setBounds(200, 200, 274, 38);

        se1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        se1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SELECT MAIN TEST TYPE", "PARASITLOGY(STOOL EXAMINATION)", "BLOOD FILM", "MICROSCOPE EXAMINATION(URPNALYSYIS)", "CHEMICAL TEST", "CEROLOGY", " " }));
        se1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                se1MouseClicked(evt);
            }
        });
        se1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                se1ItemStateChanged(evt);
            }
        });
        se1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                se1ActionPerformed(evt);
            }
        });
        jDesktopPane1.add(se1);
        se1.setBounds(200, 250, 274, 40);

        cr.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cr.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SELECT SUB TYPE", "URINE HCG", "VDRL", "WIDAL", "WEIL-FELIX", "ANTI-H.PYLORI", "ASO", "HBSAG", "COLOR", "SP. GRAVITY", "ALBUMINA", "GLUCOSE", "KENTON", "BILIRUBINE", "BLOOD/HGB ", "NITRATE", "UROBILINOGEN", "APEARANCE", "CONSISTACY", "DIRECT MICROSCOPE", "BLOOD FILM", "RBC", "WBC", "EPITHELIAN CELL", "CAST WBC", "GRANULAR CAST", "HYALINE CAST", "CRYSTALS", "BACTERIA", "OHTERS" }));
        cr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crActionPerformed(evt);
            }
        });
        jDesktopPane1.add(cr);
        cr.setBounds(200, 300, 274, 39);

        crtr.setColumns(20);
        crtr.setRows(5);
        jScrollPane1.setViewportView(crtr);

        jDesktopPane1.add(jScrollPane1);
        jScrollPane1.setBounds(200, 350, 274, 39);

        rm.setColumns(20);
        rm.setRows(5);
        jScrollPane2.setViewportView(rm);

        jDesktopPane1.add(jScrollPane2);
        jScrollPane2.setBounds(200, 400, 280, 39);

        call.setText("CALLING");
        call.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callActionPerformed(evt);
            }
        });
        jDesktopPane1.add(call);
        call.setBounds(200, 470, 90, 40);

        jButton2.setText("PERVIOUSE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jDesktopPane1.add(jButton2);
        jButton2.setBounds(440, 470, 90, 40);

        jButton1.setText("SUBMIT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jDesktopPane1.add(jButton1);
        jButton1.setBounds(550, 470, 80, 40);

        callagain.setText("CALLING AGAIN");
        callagain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callagainActionPerformed(evt);
            }
        });
        jDesktopPane1.add(callagain);
        callagain.setBounds(310, 470, 120, 40);

        txtarea.setColumns(20);
        txtarea.setRows(5);
        jScrollPane6.setViewportView(txtarea);

        jDesktopPane1.add(jScrollPane6);
        jScrollPane6.setBounds(490, 90, 330, 350);
        jDesktopPane1.add(jPanel1);
        jPanel1.setBounds(10, 10, 900, 590);

        getContentPane().add(jDesktopPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 920, 610));
        getContentPane().add(display, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 0, 120, 30));
        getContentPane().add(displayp, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 0, 130, 30));
        getContentPane().add(infoid, new org.netbeans.lib.awtextra.AbsoluteConstraints(34, 650, 90, 30));

        jMenu1.setText("BACK                   ");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        jMenu2.setText("LOGOUT                  ");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pnActionPerformed

    private void crActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_crActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
//        new SUMERY_PAGE(display.getText(),displayp.getText(),infoid.getText()).setVisible(true);
//        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Date d = new Date();
        SimpleDateFormat s = new SimpleDateFormat("yyyy-MM-dd");
        String date = s.format(d);
        String times;
        Date dd = new Date();
        SimpleDateFormat s1 = new SimpleDateFormat("hh:mm:ss a");
        times = s1.format(dd);
        try {
            Mainclass ob;
            ob = new Mainclass();
            ob.opo = opo.getText();
            ob.id_number = id.getText();
            ob.stool_examination = se1.getSelectedItem().toString();
            String lab_id = null;
            String cerology = cr.getSelectedItem().toString();
            String cerology_result = crtr.getText();
            String remark = rm.getText();
            ob.history_id = pn.getText();
            String exam1 = ob.stool_examination + "=" + cerology + "  RESULT=" + cerology_result;
            String total_lab_test_result = exam1;// + "\n" + exam2 + "\n" + exam3 + "\n" + exam4;
            try {


                if (ob.id_number.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "PLEASE ENTER ID NUMBER",
                            null,
                            JOptionPane.QUESTION_MESSAGE);
                } else if ((id.getText().length() < 7) || (id.getText().length() > 7)) {
                    JOptionPane.showMessageDialog(null, "PLEASE ENTER VALID SIZE OF ID NUMBER",
                            null,
                            JOptionPane.QUESTION_MESSAGE);
                    id.setText("");
                } else if (se1.getSelectedItem().equals("SELECT MAIN TEST TYPE")) {
                    JOptionPane.showMessageDialog(null, "PLEASE SELECT MAIN TYPE",
                            null,
                            JOptionPane.QUESTION_MESSAGE);
                } else if (!se1.getSelectedItem().equals("SELECT MAIN TEST TYPE") && cr.getSelectedItem().toString().equals("SELECT SUB TYPE")) {
                    JOptionPane.showMessageDialog(null, "PLEASE SELECT  SUB TYPE",
                            null,
                            JOptionPane.QUESTION_MESSAGE);
                } else if (!se1.getSelectedItem().equals("SELECT MAIN TEST TYPE") && crtr.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "PLEASE ENTER  TEST RESULT",
                            null,
                            JOptionPane.QUESTION_MESSAGE);
                } //                else if (!se1.getSelectedItem().equals("PARASITLOGY(STOOL EXAMINATION)") &&(!(cr.getSelectedItem().equals("APEARANCE"))||!(cr.getSelectedItem().equals("CONSISTACY"))||!(cr.getSelectedItem().equals("DIRECT MICROSCOPE"))||!(cr.getSelectedItem().equals("BLOOD FILM")))) {
                //                    JOptionPane.showMessageDialog(null, "PLEASE ENTER SECOND  TEST RESULT",
                //                            null,
                //                            JOptionPane.QUESTION_MESSAGE);
                //                    se1.setBorder(null);
                //                } 
                //                PARASITLOGY(STOOL EXAMINATION)
                //BLOOD FILM
                //MICROSCOPE EXAMINATION(URPNALYSYIS)
                //CHEMICAL TEST
                //CEROLOGY
                //                
                //                URINE HCG
                //VDRL
                //WIDAL
                //WEIL-FELIX
                //ANTI-H.PYLORI
                //ASO
                //HBSAG
                //COLOR
                //SP. GRAVITY
                //ALBUMINA
                //GLUCOSE
                //KENTON
                //BILIRUBINE
                //BLOOD/HGB 
                //NITRATE
                //UROBILINOGEN
                //APEARANCE
                //CONSISTACY
                //DIRECT MICROSCOPE
                //BLOOD FILM
                //RBC
                //WBC
                //EPITHELIAN CELL
                //CAST WBC
                //GRANULAR CAST
                //HYALINE CAST
                //CRYSTALS
                //BACTERIA
                //OHTERS
                //  else if (!se2.getSelectedItem().equals("SELECT MAIN TEST TYPE") && PR.getSelectedItem().toString().equals("SELECT SUB TYPE")) {
                //                    JOptionPane.showMessageDialog(null, "PLEASE SELECT THIRD SUB TYPE",
                //                            null,
                //                            JOptionPane.QUESTION_MESSAGE);
                //                    se2.setBorder(null);
                //                } else if (!se2.getSelectedItem().equals("SELECT MAIN TEST TYPE") && prtr.getText().isEmpty()) {
                //                    JOptionPane.showMessageDialog(null, "PLEASE ENTER THIRD  TEST RESULT",
                //                            null,
                //                            JOptionPane.QUESTION_MESSAGE);
                //                    se2.setBorder(null);
                //                } else if (!se3.getSelectedItem().equals("SELECT MAIN TEST TYPE") && un.getSelectedItem().toString().equals("SELECT SUB TYPE")) {
                //                    JOptionPane.showMessageDialog(null, "PLEASE SELECT FOURTH SUB TYPE",
                //                            null,
                //                            JOptionPane.QUESTION_MESSAGE);
                //                    se3.setBorder(null);
                //                } else if (!se3.getSelectedItem().equals("SELECT MAIN TEST TYPE") && untr.getText().isEmpty()) {
                //                    JOptionPane.showMessageDialog(null, "PLEASE ENTER FOURTH  TEST RESULT",
                //                            null,
                //                            JOptionPane.QUESTION_MESSAGE);
                //                    se3.setBorder(null);
                //                } else if (!se1.getSelectedItem().equals("SELECT MAIN TEST TYPE") && se1.getSelectedItem().toString() == se4.getSelectedItem().toString()) {
                //                    JOptionPane.showMessageDialog(null, "EACH TEST TYPE MUST BE DIFFERENT \nPLEASE DEFFERTIATE FIRST AND SECOND \nMAIN TEST TYPE ",
                //                            null,
                //                            JOptionPane.QUESTION_MESSAGE);
                //                } else if (!se1.getSelectedItem().equals("SELECT MAIN TEST TYPE") && se1.getSelectedItem().toString() == se2.getSelectedItem().toString()) {
                //                    JOptionPane.showMessageDialog(null, "EACH TEST TYPE MUST BE DIFFERENT \nPLEASE DEFFERTIATE FIRST AND THIRD \nMAIN TEST TYPE ",
                //                            null,
                //                            JOptionPane.QUESTION_MESSAGE);
                //                } else if (!se1.getSelectedItem().equals("SELECT MAIN TEST TYPE") && se1.getSelectedItem().toString() == se3.getSelectedItem().toString()) {
                //                    JOptionPane.showMessageDialog(null, "EACH TEST TYPE MUST BE DIFFERENT \nPLEASE DEFFERTIATE FIRST AND FOURTH \nMAIN TEST TYPE ",
                //                            null,
                //                            JOptionPane.QUESTION_MESSAGE);
                //                } else if (!se4.getSelectedItem().equals("SELECT MAIN TEST TYPE") && se4.getSelectedItem().toString() == se2.getSelectedItem().toString()) {
                //                    JOptionPane.showMessageDialog(null, "EACH TEST TYPE MUST BE DIFFERENT \nPLEASE DEFFERTIATE SECOND AND THIRD \nMAIN TEST TYPE ",
                //                            null,
                //                            JOptionPane.QUESTION_MESSAGE);
                //                } else if (!se4.getSelectedItem().equals("SELECT MAIN TEST TYPE") && se3.getSelectedItem().toString() == se4.getSelectedItem().toString()) {
                //                    JOptionPane.showMessageDialog(null, "EACH TEST TYPE MUST BE DIFFERENT \nPLEASE DEFFERTIATE SECOND AND FOURTH \nMAIN TEST TYPE ",
                //                            null,
                //                            JOptionPane.QUESTION_MESSAGE);
                //                } else if (!se3.getSelectedItem().equals("SELECT MAIN TEST TYPE") && se3.getSelectedItem().toString() == se2.getSelectedItem().toString()) {
                //                    JOptionPane.showMessageDialog(null, "EACH TEST TYPE MUST BE DIFFERENT \nPLEASE DEFFERTIATE THIRD AND FOURTH \nMAIN TEST TYPE ",
                //                            null,
                //                            JOptionPane.QUESTION_MESSAGE);
                //  } 
                else {

                    RMIInterface hello = (RMIInterface) Naming.lookup("//localhost/clinical");
                    System.out.println(hello.investigation_record(date, times, ob.id_number, ob.history_id, ob.opo, lab_id, display.getText(), total_lab_test_result, remark));
                    JOptionPane.showMessageDialog(null, "SUCCESSFULLY INVESTIGATED  ",
                            null,
                            JOptionPane.PLAIN_MESSAGE);
                }
            } catch (NotBoundException e) {
                System.out.println("Clinicalclient not bound exception:" + e);
                //  lbl.setText("Clinicalclient not bound exception:" +e.getMessage());
            } catch (Exception e) {
                System.out.println("HelloClient exception:" + e);
            }
        } catch (RemoteException ex) {
            Logger.getLogger(Register_pat_info.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseClicked

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
//        PR.setVisible(false);
//        un.setVisible(false);
//        ch.setVisible(false);
//        cr.setVisible(false);
//        if(se.getSelectedItem().toString()=="PARASITLOGY(STOOL EXAMINATION)")
//        {
//            PR.setVisible(true);
//        }
//        else if(se.getSelectedItem().toString()=="MICROSCOPE EXAMINATION(URPNALYSYIS)")
//        {
//            un.setVisible(true);
//        }
//         else if(se.getSelectedItem().toString()=="CHEMICAL TEST")
//        {
//            ch.setVisible(true);
//        }
//           else if(se.getSelectedItem().toString()=="CEROLOG")
//        {
//            cr.setVisible(true);
//        }  
//        PARASITLOGY(STOOL EXAMINATION)
//BLOOD FILM
//MICROSCOPE EXAMINATION(URPNALYSYIS)
//CHEMICAL TEST
//CEROLOGY
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowActivated

    private void se1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_se1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_se1MouseClicked

    private void se1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_se1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_se1ItemStateChanged

    private void se1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_se1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_se1ActionPerformed

    private void callActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callActionPerformed
        try {
            Mainclass ob = new Mainclass();
            ob.id_number = id.getText();

            RMIInterface hello;
            try {
                hello = (RMIInterface) Naming.lookup("//localhost/clinical");
                if (rmnm.getSelectedItem().toString() == "PLEASE SELECT ROOM NUMBER") {
                    JOptionPane.showMessageDialog(null, "PLEASE SELECT ROOM NUMBER",
                            null,
                            JOptionPane.PLAIN_MESSAGE);
                } else {
                    int countforinvestigation = hello.calling_lab_result_count(call.getText());


                    if (countforinvestigation >= 1) {
                        countforinvestigation = countforinvestigation * 13;
                        String fetch[] = new String[countforinvestigation];
                        fetch = hello.calling(countforinvestigation, call.getText(), rmnm.getSelectedItem().toString());
                        int c = fetch.length;
                        int i = 0, j = 0, idx = 0;
                        if (c >= 1) {
                            while (i < c) {
                                String test_type = (fetch[10]);
                                opo.setText(fetch[9]);
                                if (test_type.equals("PARASITLOGY(STOOL EXAMINATION)")) {
                                    se1.setSelectedItem("PARASITLOGY(STOOL EXAMINATION)");
                                } else if (test_type.equals("MICROSCOPE EXAMINATION(URPNALYSYIS)")) {
                                    se1.setSelectedItem("MICROSCOPE EXAMINATION(URPNALYSYIS)");
                                } else if (test_type.equals("CEROLOGY")) {
                                    se1.setSelectedItem("CEROLOGY");
                                } else if (test_type.equals("CHEMICAL TEST")) {
                                    se1.setSelectedItem("CHEMICAL TEST");
                                } else {
                                    se1.setSelectedItem("BLOOD FILM");
                                }

//                        if(test_type.equals("PARASITLOGY(STOOL EXAMINATION)"))
//                        {
//                         System.out.println( "PARASITLOGY(STOOL EXAMINATION)" ); 
//                        }
//                        if(test_type.equals("PARASITLOGY(STOOL EXAMINATION)"))
//                        {
//                         System.out.println( "PARASITLOGY(STOOL EXAMINATION)" ); 
//                        }
//                        else if(test_type.equals("MICROSCOPE EXAMINATION(URPNALYSYIS)"))
//                        {
//                            System.out.println( "MICROSCOPE EXAMINATION(URPNALYSYIS)");
//                        }
//                        else if(test_type.equals("CEROLOGY"))
//                        {
//                          System.out.println( "CEROLOGY");
//                        }
//                        else if(test_type.equals("CHEMICAL TEST"))
//                        {
//                         System.out.println( "CHEMICAL TEST");   
//                        }
//                        else
//                        {
//                         System.out.println( "BLOOD FILM");   
//                        }

                                id.setText(fetch[1]);
                                String first_name = (fetch[4]);
                                String last_name = (fetch[5]);
                                pn.setText(first_name + "    " + last_name);
//                                String assessment = fetch[63];
//                                String subjective_sumery = fetch[61];
//                                String objective_sumery = fetch[62];
//                                txtarea.setText("subjective summry:" + subjective_sumery + "\n" + "objective summry:" + objective_sumery);
                                i++;
                            }


                            int m = 0;
                            for (m = 0; m <= 2; m++) {
                                Voice voice;
                                VoiceManager vm = VoiceManager.getInstance();
                                voice = vm.getVoice(voicename);
                                voice.allocate();
                                try {
                                    voice.speak(id.getText());
                                } catch (Exception e) {
                                    e.getCause();
                                }
                            }
                            int viewhistoriess = hello.viewhistories(id.getText());
                            if (viewhistoriess < 1) {
                                JOptionPane.showMessageDialog(null, "ID IS NOT EXIST IN HISTORY",
                                        null,
                                        JOptionPane.PLAIN_MESSAGE);
                            } else {
                                viewhistoriess = viewhistoriess * 64;
                                String fetchs[] = new String[viewhistoriess];
                                fetchs = hello.view_histories(id.getText());
                                int iii = 0;
                                while (iii < viewhistoriess) {
                                    String objectivesummery = (fetchs[62]);
                                    String assessment = (fetchs[63]);
                                    String subjectivesummery = (fetchs[61]);
                                    txtarea.setText("OBJECTIVE SUMMERY=" + objectivesummery + "\n SUBJECTIVE SUMMERY=" + subjectivesummery + "\n ASSASSMENT=" + assessment);
                                    iii++;
                                }
                            }
                            JOptionPane.showMessageDialog(null, "YOU CAN CONTINUE",
                                    null,
                                    JOptionPane.PLAIN_MESSAGE);
                        } else {
//                            JOptionPane.showMessageDialog(null, "PLEASE WAIT",
//                                    null,
//                                    JOptionPane.PLAIN_MESSAGE);
                        }
                    } else {

                        JOptionPane.showMessageDialog(null, "PLEASE WAIT",
                                null,
                                JOptionPane.PLAIN_MESSAGE);
                    }
                }
            } catch (NotBoundException ex) {
                Logger.getLogger(Register_patient_lab_result.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(Register_patient_lab_result.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (RemoteException ex) {
            Logger.getLogger(Register_patient_lab_result.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_callActionPerformed

    private void rmnmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmnmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rmnmActionPerformed

    private void callagainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callagainActionPerformed
        try {
            Mainclass ob = new Mainclass();
            ob.id_number = id.getText();

            RMIInterface hello;
            try {
                hello = (RMIInterface) Naming.lookup("//localhost/clinical");
                if (rmnm.getSelectedItem().toString() == "PLEASE SELECT ROOM NUMBER") {
                    JOptionPane.showMessageDialog(null, "PLEASE SELECT ROOM NUMBER",
                            null,
                            JOptionPane.PLAIN_MESSAGE);
                } else {
                    int countforinvestigation = hello.calling_lab_result_count(callagain.getText());


                    if (countforinvestigation >= 1) {
                        countforinvestigation = countforinvestigation * 13;
                        String fetch[] = new String[countforinvestigation];
                        fetch = hello.calling(countforinvestigation, callagain.getText(), rmnm.getSelectedItem().toString());
                        int c = fetch.length;
                        int i = 0, j = 0, idx = 0;
                        if (c >= 1) {

                            while (i < c) {
                                String test_type = (fetch[10]);
                                opo.setText(fetch[9]);

                                if (test_type.equals("PARASITLOGY(STOOL EXAMINATION)")) {
                                    se1.setSelectedItem("PARASITLOGY(STOOL EXAMINATION)");
                                } else if (test_type.equals("MICROSCOPE EXAMINATION(URPNALYSYIS)")) {
                                    se1.setSelectedItem("MICROSCOPE EXAMINATION(URPNALYSYIS)");
                                } else if (test_type.equals("CEROLOGY")) {
                                    se1.setSelectedItem("CEROLOGY");
                                } else if (test_type.equals("CHEMICAL TEST")) {
                                    se1.setSelectedItem("CHEMICAL TEST");
                                } else {
                                    se1.setSelectedItem("BLOOD FILM");
                                }
                                id.setText(fetch[1]);
                                String first_name = (fetch[4]);
                                String last_name = (fetch[5]);
                                pn.setText(first_name + "    " + last_name);
                                i++;
                            }
                            int m = 0;
                            for (m = 0; m <= 2; m++) {
                                Voice voice;
                                VoiceManager vm = VoiceManager.getInstance();
                                voice = vm.getVoice(voicename);
                                voice.allocate();
                                try {
                                    voice.speak(id.getText());
                                } catch (Exception e) {
                                    e.getCause();
                                }
                            }
                            int viewhistoriess = hello.viewhistories(id.getText());
                            if (viewhistoriess < 1) {

                                JOptionPane.showMessageDialog(null, "ID IS NOT EXIST IN HISTORY",
                                        null,
                                        JOptionPane.PLAIN_MESSAGE);
                            } else {
                                viewhistoriess = viewhistoriess * 64;
                                String fetchs[] = new String[viewhistoriess];
                                fetchs = hello.view_histories(id.getText());
                                int iii = 0;
                                while (iii < viewhistoriess) {
                                    String objectivesummery = (fetchs[62]);
                                    String assessment = (fetchs[63]);
                                    String subjectivesummery = (fetchs[61]);
                                    txtarea.setText("OBJECTIVE SUMMERY=" + objectivesummery + "\n SUBJECTIVE SUMMERY=" + subjectivesummery + "\n ASSASSMENT=" + assessment);
                                    iii++;
                                }
//                               int iii=0;
//                            while (iii < viewhistoriess) {
//                                // String test_type=(fetch[10]);
//                                opo.setText(fetch[8]);
//                            }
                            }

                            JOptionPane.showMessageDialog(null, "YOU CAN CONTINUE",
                                    null,
                                    JOptionPane.PLAIN_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(null, "PLEASE WAIT",
                                    null,
                                    JOptionPane.PLAIN_MESSAGE);
                        }
                    } else {

                        JOptionPane.showMessageDialog(null, "PLEASE WAIT",
                                null,
                                JOptionPane.PLAIN_MESSAGE);
                    }
                }
            } catch (NotBoundException ex) {
                Logger.getLogger(Register_patient_lab_result.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(Register_patient_lab_result.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (RemoteException ex) {
            Logger.getLogger(Register_patient_lab_result.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_callagainActionPerformed

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
         new Laboratorist(display.getText(), displayp.getText()).setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jMenu1MouseClicked

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        new LOGIN().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jMenu2MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Register_patient_lab_result.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Register_patient_lab_result.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Register_patient_lab_result.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Register_patient_lab_result.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Register_patient_lab_result("", "", "").setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton call;
    private javax.swing.JButton callagain;
    private javax.swing.JComboBox cr;
    private javax.swing.JTextArea crtr;
    private javax.swing.JLabel display;
    private javax.swing.JLabel displayp;
    private javax.swing.JTextField id;
    private javax.swing.JLabel infoid;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextField opo;
    private javax.swing.JTextField pn;
    private javax.swing.JTextArea rm;
    private javax.swing.JComboBox rmnm;
    private javax.swing.JComboBox se1;
    private javax.swing.JTextArea txtarea;
    // End of variables declaration//GEN-END:variables
}
