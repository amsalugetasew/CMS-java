
import java.awt.event.KeyEvent;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author gech
 */
public class Register_pat_info extends javax.swing.JFrame {

    /**
     * Creates new form Register_pat_info
     */
    public Register_pat_info(String x, String y) {
        initComponents();
        display.setText(x);
        displayp.setText(y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jDesktopPane2 = new javax.swing.JDesktopPane();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        statues = new javax.swing.JComboBox();
        addrss = new javax.swing.JTextField();
        rlgn = new javax.swing.JComboBox();
        occpn = new javax.swing.JTextField();
        sex = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        dep = new javax.swing.JTextField();
        ln = new javax.swing.JTextField();
        mn = new javax.swing.JTextField();
        fn = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        age = new javax.swing.JTextField();
        blocknm = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        dormnum = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        display = new javax.swing.JLabel();
        displayp = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1112, 693));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jDesktopPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jDesktopPane2.setBackground(new java.awt.Color(204, 204, 204));
        jDesktopPane2.setForeground(new java.awt.Color(255, 255, 255));

        jButton1.setBackground(new java.awt.Color(102, 102, 102));
        jButton1.setForeground(new java.awt.Color(51, 51, 51));
        jButton1.setText("REGISTER");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jDesktopPane2.add(jButton1);
        jButton1.setBounds(340, 470, 96, 35);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setText("   STATUES");
        jDesktopPane2.add(jLabel6);
        jLabel6.setBounds(30, 410, 110, 25);

        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel12.setText("   ADDRESS");
        jDesktopPane2.add(jLabel12);
        jLabel12.setBounds(30, 360, 90, 25);

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel8.setText("  RELIGION  ");
        jDesktopPane2.add(jLabel8);
        jLabel8.setBounds(390, 250, 130, 29);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel7.setText("  OCCUPATION ");
        jDesktopPane2.add(jLabel7);
        jLabel7.setBounds(390, 190, 130, 30);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setText("  SEX");
        jDesktopPane2.add(jLabel5);
        jLabel5.setBounds(400, 140, 103, 22);

        statues.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SELECT STATUES", "NORMAL", "EMERGENCY" }));
        statues.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statuesActionPerformed(evt);
            }
        });
        jDesktopPane2.add(statues);
        statues.setBounds(160, 400, 230, 40);

        addrss.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                addrssKeyTyped(evt);
            }
        });
        jDesktopPane2.add(addrss);
        addrss.setBounds(160, 350, 230, 40);

        rlgn.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ORTHODOX CRISTIAN", "PROTESTANT", "MUSLIM", "OTHER" }));
        jDesktopPane2.add(rlgn);
        rlgn.setBounds(540, 240, 240, 40);

        occpn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                occpnKeyTyped(evt);
            }
        });
        jDesktopPane2.add(occpn);
        occpn.setBounds(540, 180, 240, 40);

        sex.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MALE", "FEMAL" }));
        sex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sexActionPerformed(evt);
            }
        });
        jDesktopPane2.add(sex);
        sex.setBounds(540, 130, 240, 40);

        jButton2.setText("SEARCH FOR SCHEDULE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jDesktopPane2.add(jButton2);
        jButton2.setBounds(540, 80, 240, 40);

        dep.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                depKeyTyped(evt);
            }
        });
        jDesktopPane2.add(dep);
        dep.setBounds(540, 290, 240, 40);

        ln.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lnKeyTyped(evt);
            }
        });
        jDesktopPane2.add(ln);
        ln.setBounds(160, 250, 230, 40);

        mn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mnKeyTyped(evt);
            }
        });
        jDesktopPane2.add(mn);
        mn.setBounds(160, 190, 230, 40);

        fn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                fnMousePressed(evt);
            }
        });
        fn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fnActionPerformed(evt);
            }
        });
        fn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fnKeyTyped(evt);
            }
        });
        jDesktopPane2.add(fn);
        fn.setBounds(160, 140, 230, 40);

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel9.setText(" ID NUMBER");
        jDesktopPane2.add(jLabel9);
        jLabel9.setBounds(40, 80, 90, 29);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("   FIRST NAME");
        jDesktopPane2.add(jLabel1);
        jLabel1.setBounds(33, 150, 120, 28);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("   MIDLE NAME");
        jDesktopPane2.add(jLabel2);
        jLabel2.setBounds(30, 190, 110, 30);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setText("   LAST NAME");
        jDesktopPane2.add(jLabel3);
        jLabel3.setBounds(30, 250, 110, 30);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setText("DEPARTMENT");
        jDesktopPane2.add(jLabel4);
        jLabel4.setBounds(400, 300, 120, 30);

        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });
        id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                idKeyTyped(evt);
            }
        });
        jDesktopPane2.add(id);
        id.setBounds(160, 80, 230, 40);

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel11.setText(" AGE");
        jDesktopPane2.add(jLabel11);
        jLabel11.setBounds(40, 300, 80, 33);

        age.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ageKeyTyped(evt);
            }
        });
        jDesktopPane2.add(age);
        age.setBounds(160, 300, 230, 40);

        blocknm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blocknmActionPerformed(evt);
            }
        });
        blocknm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                blocknmKeyTyped(evt);
            }
        });
        jDesktopPane2.add(blocknm);
        blocknm.setBounds(540, 340, 240, 40);

        jLabel13.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel13.setText("BLOCK NO");
        jDesktopPane2.add(jLabel13);
        jLabel13.setBounds(400, 350, 120, 30);

        dormnum.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DORMETRY NUMBER", "100", "101", "102", "103", "104", "105", "106", "107", "108", "109", "110", "111", "112", "113", "114", "115", "116", "117", "118", "200", "201", "202", "203", "204", "205", "206", "207", "208", "209", "210", "211", "212", "213", "214", "215", "216", "217", "218", "300", "301", "302", "303", "304", "305", "306", "307", "308", "309", "310", "311", "312", "313", "314", "315", "316", "317", "318", "400", "401", "402", "403", "404", "405", "406", "407", "408", "409", "410", "411", "412", "413", "414", "415", "416", "417", "418" }));
        dormnum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dormnumActionPerformed(evt);
            }
        });
        jDesktopPane2.add(dormnum);
        dormnum.setBounds(540, 390, 240, 40);

        jLabel14.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel14.setText("DORMETERY");
        jDesktopPane2.add(jLabel14);
        jLabel14.setBounds(400, 400, 120, 25);

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel10.setText("PATIENT IDENTIFICATION REGISTRATION FORM ");
        jPanel1.add(jLabel10);

        jDesktopPane2.add(jPanel1);
        jPanel1.setBounds(10, 10, 790, 520);

        getContentPane().add(jDesktopPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 810, 540));
        getContentPane().add(display, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 0, 120, 30));
        getContentPane().add(displayp, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 0, 130, 30));

        jMenu1.setText("BACK                                         ");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        jMenu2.setText("LOGOUT                ");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Date d = new Date();
        SimpleDateFormat s = new SimpleDateFormat("yyyy-MM-dd");
        String x = s.format(d);
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
        String time = sdf.format(d);


        try {
            Mainclass ob = new Mainclass();
            ob.department = dep.getText();
            ob.block_number = blocknm.getText();
            ob.dormetry_number = dormnum.getSelectedItem().toString();
            ob.id_number = id.getText();
            ob.first_name = fn.getText();
            ob.middle_name = mn.getText();
            ob.last_name = ln.getText();
            ob.age = age.getText();
            ob.sex = sex.getSelectedItem().toString();
            ob.religion = rlgn.getSelectedItem().toString();
            ob.occupation = occpn.getText();
            ob.address = addrss.getText();
            String statue = statues.getSelectedItem().toString();
            if (ob.id_number.isEmpty()) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER ID NUMBER",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
            } else if ((id.getText().length() < 7) || (id.getText().length() > 7)) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER VALID SIZE OF ID NUMBER",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
                id.setText("");
            } else if (ob.first_name.isEmpty()) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER FIRST NAME",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
            } else if ((fn.getText().length() < 3) || (fn.getText().length() > 15)) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER VALID SIZE OF FIRST NAME",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
                fn.setText("");
            } else if (ob.middle_name.isEmpty()) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER MIDDLE NAME",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
            } else if ((mn.getText().length() < 3) || (mn.getText().length() > 15)) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER VALID SIZE OF MIDDLE NAME",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
                mn.setText("");
            } else if (ob.last_name.isEmpty()) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER LAST NAME",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
                ln.setText("");
            } else if ((ln.getText().length() < 3) || (ln.getText().length() > 15)) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER VALID SIZE OF LAST NAME",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
                ln.setText("");
            } else if (ob.age.isEmpty()) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER AGE",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
                age.setText("");
            } else if ((age.getText().length() < 1) || (age.getText().length() > 3)) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER VALID SIZE OF AGE",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
                age.setText("");
            } else if (ob.occupation.isEmpty()) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER OCCUPATION",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
                occpn.setText("");
            } else if ((occpn.getText().length() < 4) || (occpn.getText().length() > 20)) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER VALID SIZE OF OCCUPATION",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
                occpn.setText("");
            } else if (ob.address.isEmpty()) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER ADDRESS",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
                addrss.setText("");
            } else if ((addrss.getText().length() < 3) || (addrss.getText().length() > 20)) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER VALID SIZE OF ADDRESS",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
                addrss.setText("");
            } else if (dep.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER DEPARTEMENT",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
                dep.setText("");
            } else if ((dep.getText().length() < 2) || (dep.getText().length() > 30)) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER VALID SIZE OF DEPARTEMENT",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
                dep.setText("");
            } else if (blocknm.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER BLOCK NUMBER",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
                blocknm.setText("");
            } else if ((blocknm.getText().length() < 2) || (blocknm.getText().length() > 3)) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER VALID SIZE OF BLOCK NUMBER",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
                blocknm.setText("");
            } else if (statues.getSelectedItem().toString() == "SELECT STATUES") {
                JOptionPane.showMessageDialog(null, "PLEASE SELECT STATUES",
                        null,
                        JOptionPane.QUESTION_MESSAGE);

            } else if (dormnum.getSelectedItem().toString() == "DORMETRY NUMBER") {
                JOptionPane.showMessageDialog(null, "PLEASE SELECT DORMITRY NUMBER",
                        null,
                        JOptionPane.QUESTION_MESSAGE);

            } else {
                try {
                    RMIInterface hello = (RMIInterface) Naming.lookup("//localhost/clinical");
                    System.out.println(hello.patient_information(ob.card_number, ob.id_number, ob.first_name, ob.middle_name, ob.last_name, ob.age, ob.sex, ob.occupation, ob.religion, ob.address, "ready", x, statue, time, ob.department, ob.block_number, ob.dormetry_number));
                    JOptionPane.showMessageDialog(null, "SUCCESSFULLY INSERETED",
                            null,
                            JOptionPane.PLAIN_MESSAGE);

                } catch (NotBoundException e) {
                    //System.out.println("Clinicalclient not bound exception:" +e);
                    JOptionPane.showMessageDialog(null, "Clinicalclient not bound exception:" + e,
                            null,
                            JOptionPane.PLAIN_MESSAGE);
                    JOptionPane.showMessageDialog(null, "Clinicalclient not bound exception:" + e.getMessage(),
                            null,
                            JOptionPane.PLAIN_MESSAGE);
                } catch (Exception e) {
                    System.out.println("HelloClient exception:" + e);
                }
            }
        } catch (RemoteException ex) {
            Logger.getLogger(Register_pat_info.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idActionPerformed

    private void sexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sexActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sexActionPerformed

    private void statuesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statuesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statuesActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        Date d = new Date();
        SimpleDateFormat s = new SimpleDateFormat("yyyy-MM-dd");
        String x = s.format(d);
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
        String time = sdf.format(d);

        try {
            Mainclass ob = new Mainclass();
            String statue = statues.getSelectedItem().toString();
            ob.id_number = id.getText();
            ob.age = age.getText();
            try {
                RMIInterface hello = (RMIInterface) Naming.lookup("//localhost/clinical");
                if (id.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "PLEASE ENTER ID NUMBER",
                            null,
                            JOptionPane.PLAIN_MESSAGE);
                } else if (age.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "PLEASE ENTER AGE",
                            null,
                            JOptionPane.PLAIN_MESSAGE);
                } 
                else if (blocknm.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "PLEASE ENTER BLOCK NUMBER",
                            null,
                            JOptionPane.PLAIN_MESSAGE);
                }
                     else if (blocknm.getText().length()<2||blocknm.getText().length()>4) {
                    JOptionPane.showMessageDialog(null, "PLEASE ENTER VALID LENGTH BLOCK NUMBER",
                            null,
                            JOptionPane.PLAIN_MESSAGE);
                }
                else if (statues.getSelectedItem().toString() == "SELECT STATUES") {
                    JOptionPane.showMessageDialog(null, "PLEASE ENTER SELECT STATUES",
                            null,
                            JOptionPane.PLAIN_MESSAGE);
                } else if (dormnum.getSelectedItem().toString() == "DORMETRY NUMBER") {
                    JOptionPane.showMessageDialog(null, "PLEASE ENTER SELECT DORMETRY NUMBER",
                            null,
                            JOptionPane.PLAIN_MESSAGE);
                } else {
                    String patient = hello.existing_patient_info(ob.id_number, x, time, statue, "ready", ob.age, blocknm.getText(), dormnum.getSelectedItem().toString());
                    int count = Integer.parseInt(patient);
                    if (count >= 1) {
                        //  System.out.println(hello.scheduled(ob.id_number));
                        System.out.println(count);
                        JOptionPane.showMessageDialog(null,  "THIS ID NUMBER IS ALREADY EXIST AND IT NEEDS TO SCHEDULED",
                                null,
                                JOptionPane.PLAIN_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null,  "THIS ID NUMBER IS NEW PLEASE CLICK REGISTER BUTTON",
                                null,
                                JOptionPane.PLAIN_MESSAGE);
                    }
                }
            } catch (NotBoundException e) {
                JOptionPane.showMessageDialog(null, "Clinicalclient not bound exception:" + e,
                        null,
                        JOptionPane.PLAIN_MESSAGE);
                JOptionPane.showMessageDialog(null, "Clinicalclient not bound exception:" + e.getMessage(),
                        null,
                        JOptionPane.PLAIN_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "HelloClient exception:" + e,
                        null,
                        JOptionPane.PLAIN_MESSAGE);
            }
        } catch (RemoteException ex) {
            Logger.getLogger(Register_pat_info.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void fnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fnMousePressed
//          JOptionPane.showMessageDialog(null,"PLEASE CLICK SEARCH BUTTON",
//                    null,
//                    JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_fnMousePressed

    private void blocknmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blocknmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_blocknmActionPerformed

    private void dormnumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dormnumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dormnumActionPerformed

    private void fnKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fnKeyTyped
        int i = evt.getKeyChar();
        if (!((Character.isAlphabetic(i)) || (i == KeyEvent.VK_SPACE) || (i == KeyEvent.VK_ENTER) || (i == KeyEvent.VK_BACK_SPACE) || (i == KeyEvent.VK_DELETE))) {
            JOptionPane.showMessageDialog(null, "must be character",
                    null,
                    JOptionPane.QUESTION_MESSAGE);
            evt.consume();

        }
    }//GEN-LAST:event_fnKeyTyped

    private void ageKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ageKeyTyped
        char c = evt.getKeyChar();
        if (!((Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE)
                || c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER) || (c == KeyEvent.VK_SPACE) || (c == KeyEvent.VK_DELETE))) {
            JOptionPane.showMessageDialog(null, "age must be number",
                    null,
                    JOptionPane.QUESTION_MESSAGE);
            //gettoolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_ageKeyTyped

    private void mnKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mnKeyTyped
        int i = evt.getKeyChar();
        if (!((Character.isAlphabetic(i)) || (i == KeyEvent.VK_SPACE) || (i == KeyEvent.VK_BACK_SPACE) || (i == KeyEvent.VK_DELETE))) {
            JOptionPane.showMessageDialog(null, "middle name must be character",
                    null,
                    JOptionPane.QUESTION_MESSAGE);
            evt.consume();

        }
    }//GEN-LAST:event_mnKeyTyped

    private void lnKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lnKeyTyped
        int i = evt.getKeyChar();
        if (!((Character.isAlphabetic(i)) || (i == KeyEvent.VK_SPACE) || (i == KeyEvent.VK_BACK_SPACE) || (i == KeyEvent.VK_DELETE))) {
            JOptionPane.showMessageDialog(null, "last name must be character",
                    null,
                    JOptionPane.QUESTION_MESSAGE);
            evt.consume();

        }
    }//GEN-LAST:event_lnKeyTyped

    private void occpnKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_occpnKeyTyped
        int i = evt.getKeyChar();
        if (!((Character.isAlphabetic(i)) || (i == KeyEvent.VK_SPACE) || (i == KeyEvent.VK_BACK_SPACE) || (i == KeyEvent.VK_DELETE))) {
            JOptionPane.showMessageDialog(null, "occupation must be character",
                    null,
                    JOptionPane.QUESTION_MESSAGE);
            evt.consume();

        }
    }//GEN-LAST:event_occpnKeyTyped

    private void depKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_depKeyTyped
        int i = evt.getKeyChar();
        if (!((Character.isAlphabetic(i)) || (i == KeyEvent.VK_SPACE) || (i == KeyEvent.VK_BACK_SPACE) || (i == KeyEvent.VK_DELETE))) {
            JOptionPane.showMessageDialog(null, "department must be character",
                    null,
                    JOptionPane.QUESTION_MESSAGE);
            evt.consume();

        }
    }//GEN-LAST:event_depKeyTyped

    private void blocknmKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_blocknmKeyTyped
        char c = evt.getKeyChar();
        if (!((Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE)
                || c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER) || (c == KeyEvent.VK_SPACE) || (c == KeyEvent.VK_DELETE))) {
            JOptionPane.showMessageDialog(null, "block number must be number",
                    null,
                    JOptionPane.QUESTION_MESSAGE);
            //gettoolkit().beep();
            evt.consume();
    }//GEN-LAST:event_blocknmKeyTyped
    }
    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        new Reception(display.getText(), displayp.getText()).setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jMenu1MouseClicked

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        new LOGIN().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jMenu2MouseClicked

    private void addrssKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addrssKeyTyped
        int i = evt.getKeyChar();
        if (!((Character.isAlphabetic(i)) || (i == KeyEvent.VK_SPACE) || (i == KeyEvent.VK_BACK_SPACE) || (i == KeyEvent.VK_DELETE))) {
            JOptionPane.showMessageDialog(null, "address must be character",
                    null,
                    JOptionPane.QUESTION_MESSAGE);
            evt.consume();

        }
    }//GEN-LAST:event_addrssKeyTyped

    private void idKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_idKeyTyped

        char c = evt.getKeyChar();
        if (!((Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE)
                || c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER) || (c == KeyEvent.VK_SLASH) || (c == KeyEvent.VK_SPACE) || (c == KeyEvent.VK_DELETE))) {
            JOptionPane.showMessageDialog(null, "id number must be number",
                    null,
                    JOptionPane.QUESTION_MESSAGE);
            //gettoolkit().beep();
            evt.consume();
        }


    }//GEN-LAST:event_idKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Register_pat_info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Register_pat_info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Register_pat_info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Register_pat_info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Register_pat_info("", "").setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addrss;
    private javax.swing.JTextField age;
    private javax.swing.JTextField blocknm;
    private javax.swing.JTextField dep;
    private javax.swing.JLabel display;
    private javax.swing.JLabel displayp;
    private javax.swing.JComboBox dormnum;
    private javax.swing.JTextField fn;
    private javax.swing.JTextField id;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JDesktopPane jDesktopPane2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField ln;
    private javax.swing.JTextField mn;
    private javax.swing.JTextField occpn;
    private javax.swing.JComboBox rlgn;
    private javax.swing.JComboBox sex;
    private javax.swing.JComboBox statues;
    // End of variables declaration//GEN-END:variables
}
