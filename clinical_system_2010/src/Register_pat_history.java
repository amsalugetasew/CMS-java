
import com.sun.speech.freetts.Voice;
import com.sun.speech.freetts.VoiceManager;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author gech
 */
public class Register_pat_history extends javax.swing.JFrame {

    /**
     * Creates new form Register_pat_history
     */
    private static final String voicename = "kevin16";

    public Register_pat_history(String x, String y, String z) {
        initComponents();
        display.setText(x);
        displayp.setText(y);
        infoid.setText(z);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        displayp = new javax.swing.JLabel();
        display = new javax.swing.JLabel();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        rmnm = new javax.swing.JComboBox();
        call = new javax.swing.JButton();
        regbtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        ph = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        ch = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        hpi = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        pnm = new javax.swing.JTextField();
        callagain = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        txta = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        infoid = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1112, 693));
        setPreferredSize(new java.awt.Dimension(1112, 693));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("                                                                                                               HISTORY PAGE"), this, org.jdesktop.beansbinding.BeanProperty.create("title"));
        bindingGroup.addBinding(binding);

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(displayp, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 0, 130, 30));
        getContentPane().add(display, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 0, 120, 30));

        jDesktopPane1.setBackground(new java.awt.Color(204, 204, 204));

        rmnm.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PLEASE SELECT ROOM NUMBER", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" }));
        rmnm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmnmActionPerformed(evt);
            }
        });
        jDesktopPane1.add(rmnm);
        rmnm.setBounds(620, 20, 180, 30);

        call.setText("CALLING");
        call.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callActionPerformed(evt);
            }
        });
        jDesktopPane1.add(call);
        call.setBounds(420, 370, 80, 40);

        regbtn.setBackground(new java.awt.Color(204, 204, 204));
        regbtn.setText("REGISTER");
        regbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regbtnActionPerformed(evt);
            }
        });
        jDesktopPane1.add(regbtn);
        regbtn.setBounds(310, 370, 100, 40);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setText(" HISTORY OF PRESSENT ILLNESS");
        jDesktopPane1.add(jLabel6);
        jLabel6.setBounds(30, 290, 230, 30);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel7.setText("HISTORY PREVIOUSE ADMITION");
        jDesktopPane1.add(jLabel7);
        jLabel7.setBounds(30, 160, 230, 27);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText(" CHIEF COMPLIANT");
        jDesktopPane1.add(jLabel1);
        jLabel1.setBounds(30, 230, 220, 29);

        jLabel8.setBackground(new java.awt.Color(153, 153, 153));
        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel8.setText("PATIENT NAME");
        jDesktopPane1.add(jLabel8);
        jLabel8.setBounds(30, 100, 180, 25);

        id.setToolTipText("");
        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });
        jDesktopPane1.add(id);
        id.setBounds(270, 40, 316, 40);

        ph.setColumns(20);
        ph.setRows(5);
        jScrollPane2.setViewportView(ph);

        jDesktopPane1.add(jScrollPane2);
        jScrollPane2.setBounds(270, 150, 320, 40);

        ch.setColumns(20);
        ch.setRows(5);
        jScrollPane1.setViewportView(ch);

        jDesktopPane1.add(jScrollPane1);
        jScrollPane1.setBounds(270, 220, 320, 40);

        hpi.setColumns(20);
        hpi.setRows(5);
        jScrollPane3.setViewportView(hpi);

        jDesktopPane1.add(jScrollPane3);
        jScrollPane3.setBounds(270, 290, 320, 40);

        jLabel9.setBackground(new java.awt.Color(153, 153, 153));
        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel9.setText(" ID NUMBER");
        jDesktopPane1.add(jLabel9);
        jLabel9.setBounds(30, 50, 180, 25);
        jDesktopPane1.add(pnm);
        pnm.setBounds(270, 90, 320, 40);

        callagain.setText("CALLING AGAIN");
        callagain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callagainActionPerformed(evt);
            }
        });
        jDesktopPane1.add(callagain);
        callagain.setBounds(520, 370, 130, 40);

        txta.setColumns(20);
        txta.setRows(5);
        jScrollPane4.setViewportView(txta);

        jDesktopPane1.add(jScrollPane4);
        jScrollPane4.setBounds(666, 56, 280, 450);
        jDesktopPane1.add(jPanel1);
        jPanel1.setBounds(10, 10, 950, 540);

        getContentPane().add(jDesktopPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 970, 560));
        getContentPane().add(infoid, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 574, 100, 30));

        jMenu1.setText("BACK                        ");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        jMenu2.setText("  LOGOUT                    ");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void regbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regbtnActionPerformed





        Date d = new Date();
        SimpleDateFormat s = new SimpleDateFormat("yyyy-MM-dd");
        //dt.setText(s.format(d));
        String x = s.format(d);
        // dtt.setText(x);
        try {
            Mainclass ob = new Mainclass();

            ob.id_number = id.getText();
            ob.dates = x;
            String patient_history = ph.getText();
            ob.hpi = hpi.getText();
            ob.ch = ch.getText();
            String Id_number =/*"GUR/"+*/ ob.id_number;
            Integer history_id = 1000;
            String general_apearance = "-";
            String vital_sign = "-";
            String bp = "-";
            String pr = "-";
            String rr = "-";
            String tmp = "-";
            String heent = "-";
            String lgs = "-";
            String resparatory_system = "-";
            String cardio_vascular_system = "-";
            String precordial = "-";
            String abdomenal_system = "-";
            String genitouniry_system = "-";
            String musko_skeletal_system = "-";
            String integmentary_system = "-";
            String glascomas_system = "-";
            String minimental_system = "-";
            String subjective_summry = "-";
            String objective_summry = "-";
            String assasment = "-";
            String cranial_nervous_system = "-";
            try {
                RMIInterface hello = (RMIInterface) Naming.lookup("//localhost/clinical");
                if (ob.id_number.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "PLEASE ENTER ID NUMBER",
                            null,
                            JOptionPane.QUESTION_MESSAGE);
                } else if ((id.getText().length() < 7) || (id.getText().length() > 7)) {
                    JOptionPane.showMessageDialog(null, "PLEASE ENTER VALID SIZE OF ID NUMBER",
                            null,
                            JOptionPane.QUESTION_MESSAGE);
                    id.setText("");
                } else if (ph.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "PLEASE ENTER PATENT HISTORY",
                            null,
                            JOptionPane.QUESTION_MESSAGE);
                } else if (ch.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "PLEASE ENTER CHIEF COMPLIANT",
                            null,
                            JOptionPane.QUESTION_MESSAGE);
                } else if (hpi.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "PLEASE ENTER HISTORY OF PRESENT ILLNESS",
                            null,
                            JOptionPane.QUESTION_MESSAGE);
                } else {



                    System.out.println(hello.patient_history(regbtn.getText(), history_id, Id_number, ob.dates, ob.ch, ob.hpi, patient_history, general_apearance, vital_sign, heent, lgs, resparatory_system, cardio_vascular_system, precordial, abdomenal_system, genitouniry_system, musko_skeletal_system, integmentary_system, glascomas_system, minimental_system, cranial_nervous_system, subjective_summry, objective_summry, assasment));


                    JOptionPane.showMessageDialog(null, "CONTINUE",
                            null,
                            JOptionPane.PLAIN_MESSAGE);
                    new pysical_examintion(display.getText(), displayp.getText(), infoid.getText()).setVisible(true);
                    this.setVisible(false);
                }
            } catch (NotBoundException e) {
                //  System.out.println("Clinicalclient not bound exception:" +e);
                JOptionPane.showMessageDialog(null, "Clinicalclient not bound exception:" + e,
                        null,
                        JOptionPane.PLAIN_MESSAGE);
                JOptionPane.showMessageDialog(null, "Clinicalclient not bound exception:" + e.getMessage(),
                        null,
                        JOptionPane.PLAIN_MESSAGE);
                //lbl.setText("Clinicalclient not bound exception:" +e.getMessage());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "HelloClient exception:" + e,
                        null,
                        JOptionPane.PLAIN_MESSAGE);
                // System.out.println("HelloClient exception:" +e);
            }
        } catch (RemoteException ex) {
            Logger.getLogger(Register_pat_info.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_regbtnActionPerformed

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idActionPerformed

    private void callActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callActionPerformed

        String room_number = rmnm.getSelectedItem().toString();
        try {
            Mainclass ob = new Mainclass();
            RMIInterface hello;
            try {
                hello = (RMIInterface) Naming.lookup("//localhost/clinical");
                if (rmnm.getSelectedItem().toString() == "PLEASE SELECT ROOM NUMBER") {
                    JOptionPane.showMessageDialog(null, "PLEASE SELECT ROOM NUMBER",
                            null,
                            JOptionPane.PLAIN_MESSAGE);
                } else {


                    int call_for_history = hello.call_pat_for_history(call.getText());


                    String x = null;
                    String id_num = null;
                    if (call_for_history >= 1) {
                        String fetch[] = new String[50];
                        fetch = hello.calling_for_history(room_number, call.getText());

                        int c = fetch.length;
                        int i = 0, j = 0, idx = 0;

                        while (i < c) {
                            infoid.setText(fetch[0]);

                            x = (fetch[3]);
                            String xx = (fetch[4]);
                            id_num = (fetch[2]);
                            id.setText(id_num);
                            String id_nums = "ID NUMBER=" + id_num;
                            String z = x + "    " + xx;
                            String sxs = (fetch[7]);
                            String sexs = "SEX=" + sxs;
                            String ags = (fetch[6]);
                            String ages = "AGE=" + ags;
                            String religion = (fetch[9]);
                            String religions = "RELIGION=" + religion;
                            pnm.setText(z);
                            String pat_name = "PATIENT FULL NAME=" + z;
                            txta.setText(id_nums + "\n" + pat_name + "\n" + sexs + "\n" + ages + "\n" + religions);
                            i++;
                        }
                        int m = 0;
                        for (m = 0; m <= 2; m++) {
                            Voice voice;
                            VoiceManager vm = VoiceManager.getInstance();
                            voice = vm.getVoice(voicename);
                            voice.allocate();
                            try {
                                voice.speak(id_num);
                            } catch (Exception e) {
                                e.getCause();
                            }
                        }
                    } else {

                        JOptionPane.showMessageDialog(null, "PLEASE WAIT",
                                null,
                                JOptionPane.QUESTION_MESSAGE);
                    }
                }

            } catch (NotBoundException ex) {
                Logger.getLogger(Register_patient_lab_result.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(Register_patient_lab_result.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (RemoteException ex) {
            Logger.getLogger(Register_patient_lab_result.class.getName()).log(Level.SEVERE, null, ex);
        }




    }//GEN-LAST:event_callActionPerformed

    private void rmnmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmnmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rmnmActionPerformed

    private void callagainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callagainActionPerformed




        String room_number = rmnm.getSelectedItem().toString();
        try {
            Mainclass ob = new Mainclass();
            RMIInterface hello;
            try {
                hello = (RMIInterface) Naming.lookup("//localhost/clinical");
                if (rmnm.getSelectedItem().toString() == "PLEASE SELECT ROOM NUMBER") {
                    JOptionPane.showMessageDialog(null, "PLEASE SELECT ROOM NUMBER",
                            null,
                            JOptionPane.PLAIN_MESSAGE);
                } else {


                    int call_for_history = hello.call_pat_for_history(callagain.getText());


                    String x = null;
                    String id_num = null;
                    if (call_for_history >= 1) {
                        String fetch[] = new String[50];
                        fetch = hello.calling_for_history(room_number, callagain.getText());

                        int c = fetch.length;
                        int i = 0, j = 0, idx = 0;

                        while (i < c) {
                            infoid.setText(fetch[0]);

                            x = (fetch[3]);
                            String xx = (fetch[3]);
                            id_num = (fetch[2]);
                            id.setText(id_num);
                            String id_nums = "ID NUMBER=" + id_num;
                            String z = x+"  "+xx;
                            String sxs = (fetch[7]);
                            String sexs = "SEX=" + sxs;
                            String ags = (fetch[6]);
                            String ages = "AGE=" + ags;
                            String religion = (fetch[9]);
                            String religions = "RELIGION=" + religion;
                            pnm.setText(z);
                            String pat_name = "PATIENT FULL NAME=" + z;
                            txta.setText(id_nums + "\n" + pat_name + "\n" + sexs + "\n" + ages + "\n" + religions);
                            i++;
                        }
                        int m = 0;
                        for (m = 0; m <= 2; m++) {
                            Voice voice;
                            VoiceManager vm = VoiceManager.getInstance();
                            voice = vm.getVoice(voicename);
                            voice.allocate();
                            try {
                                voice.speak(id_num);
                            } catch (Exception e) {
                                e.getCause();
                            }
                        }
                    } else {

                        JOptionPane.showMessageDialog(null, "PLEASE WAIT",
                                null,
                                JOptionPane.QUESTION_MESSAGE);
                    }
                }

            } catch (NotBoundException ex) {
                Logger.getLogger(Register_patient_lab_result.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(Register_patient_lab_result.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (RemoteException ex) {
            Logger.getLogger(Register_patient_lab_result.class.getName()).log(Level.SEVERE, null, ex);
        }




    }//GEN-LAST:event_callagainActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated


     

    }//GEN-LAST:event_formWindowActivated

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        new Doctor(display.getText(), displayp.getText()).setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jMenu1MouseClicked

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        new LOGIN().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jMenu2MouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
           try {
            RMIInterface hello = (RMIInterface) Naming.lookup("//localhost/clinical");

            String fetch[] = new String[5000];
            fetch = hello.Search_for_Update_examination1(infoid.getText());
            if (infoid.getText().isEmpty()) {
                regbtn.setText("REGISTER");
            } else {
                regbtn.setText("UPDATE");
                int c = fetch.length;
                int i = 0, j = 0, idx = 0;
                if (c >= 1) {
                    while (i < c) {
                        id.setText(fetch[1]);
                        String z = (fetch[3]);
                        String x = (fetch[4]);
                        pnm.setText(x + "    " + z);
                        ph.setText(fetch[9]);
                        ch.setText(fetch[7]);
                        hpi.setText(fetch[8]);
                        i++;
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "EMPTY",
                            null,
                            JOptionPane.PLAIN_MESSAGE);
                }
                infoid.setVisible(false);
            }

        } catch (NotBoundException e) {
            System.out.println("Clinicalclient not bound exception:" + e);
        } catch (Exception e) {
            System.out.println("HelloClient exception:" + e);
        }

        infoid.setVisible(false);


    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Register_pat_history.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Register_pat_history.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Register_pat_history.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Register_pat_history.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Register_pat_history("", "", "").setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton call;
    private javax.swing.JButton callagain;
    private javax.swing.JTextArea ch;
    private javax.swing.JLabel display;
    private javax.swing.JLabel displayp;
    private javax.swing.JTextArea hpi;
    private javax.swing.JTextField id;
    private javax.swing.JLabel infoid;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea ph;
    private javax.swing.JTextField pnm;
    private javax.swing.JButton regbtn;
    private javax.swing.JComboBox rmnm;
    private javax.swing.JTextArea txta;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
