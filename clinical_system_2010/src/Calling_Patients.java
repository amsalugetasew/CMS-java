
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import com.sun.speech.freetts.Voice;
import com.sun.speech.freetts.VoiceManager;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author student
 */
public class Calling_Patients extends javax.swing.JFrame {

    /**
     * Creates new form Calling_Patients
     */
    public Calling_Patients() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        pttable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        txt = new javax.swing.JTextField();
        lbl = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pttable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID_NUMBER", "CARD_NUMBER", "FIRST_NAME", "MIDDLE_NAME", "LAST_NAME", "AGE", "SEX", "OCCUPATION", "RELIGION", "ADDRESS", "SERVIECS", "date", "statues", "time"
            }
        ));
        jScrollPane1.setViewportView(pttable);

        jButton1.setText("CALLING");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtActionPerformed(evt);
            }
        });

        lbl.setText("jLabel1");

        jButton2.setText("VIEW SECHEDULED");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 657, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(81, 81, 81)
                        .addComponent(lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addComponent(txt, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(129, 129, 129))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
private static final String voicename = "kevin16";
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        String statues;
        Mainclass ob=null;
        try {
            ob=new Mainclass();
        } catch (RemoteException ex) {
            Logger.getLogger(Calling_Patients.class.getName()).log(Level.SEVERE, null, ex);
        }

        //String x[1000]=new Array();
        /////        Array v()
        try{
            RMIInterface hello=(RMIInterface)
            Naming.lookup("//localhost/clinical");

            Class.forName("com.mysql.jdbc.Driver");
            String x="jdbc:mysql://localhost:3306/mysql?zeroDateTimeBehavior=convertToNull";
            String y="root";
            String z="vertrigo";
            Connection  con;
            con = DriverManager.getConnection(x, y, z);
            Statement stmt = con.createStatement();
            String ins="select *from `clinicaldb`.`patient_information`where serviceis='ready'";// and  card_number='TCSC/1001'";
            ResultSet  rs=stmt.executeQuery(ins);
            // PreparedStatement sx=   con.prepareStatement(ins);
            //////                    int i=0;
            //////                                 while(rs.next())
            //////           {
                //////
                //////   x[i] =rs.getString(1);
                //////   i++;
                //////   x[i] =rs.getString(2);
                //////   i++;
                //////   x[i] =rs.getString(3);
                //////   i++;
                //////           }
            int c=0;
            while(rs.next())
            {
                c++;
            }
            if(c>=1)
            {

                // lbl.setText(rs.getString("card_number"));
                // lbl.setText(String.format(rs.getString(1)));
                //                       String ID = rs.getString("card_number");
                //        lbl.setText(ID);
                // String ids = rs.getString("card_number");
                //                       txt.setText(ids);

                //////        String inss="select *from `clinicaldb`.`patient_information`where card_number='TCSC/1001'";//and profession='"+ob.profssion+"'";
                //////                    ResultSet  ru=stmt.executeQuery(inss);
                String emrgms="select *from `clinicaldb`.`patient_information` where serviceis='ready' and statues='emergency' ORDER BY date,time DESC";// DESC";// ASC";//and profession='"+ob.profssion+"'";
                ResultSet  mr=stmt.executeQuery(emrgms);
                //  int i=0,j=0;
                int k=0;
                while(mr.next())
                {
                    k++;
                    //             String emrg = mr.getString("statues");
                    //                      statues=emrg;   and statues='emergency'
                }
                if(k>=1)
                {
                    String inss="select *from `clinicaldb`.`patient_information` where serviceis='ready' and statues='emergency' ORDER BY date,time DESC";// DESC";// ASC";//and profession='"+ob.profssion+"'";
                    ResultSet  r=stmt.executeQuery(inss);
                    ////                    r x[];
                    int i=0,j=0,indx=0;
                    ////                        while(r[].next())
                    while(r.next())
                    {
                        String ids = r.getString("id_number");
                        txt.setText(ids);

                        // txt.setText(ids);
                        //                pttable.getModel().setValueAt(r[indx], i, j);
                        //                j++;
                        //                indx++;
                        pttable.getModel().setValueAt(r.getString(2), i, j);
                        j++;
                        // indx++;
                        pttable.getModel().setValueAt(r.getString(2), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(3), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(4), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(5), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(6), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(7), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(8), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(9), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(10), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(11), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(12), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(13), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(14), i, j);
                        j=0;
                        i++;
                        //  indx++;

                    }
                    int m=0;
                    for(m=0;m<=2;m++)
                    {
                        Voice voice;
                        VoiceManager vm=VoiceManager.getInstance();
                        voice=vm.getVoice(voicename);
                        voice.allocate();
                        try{
                            voice.speak(txt.getText());
                        }catch(Exception e)
                        {
                            e.getCause();
                        }
                    }

                    String update="update `clinicaldb`.`patient_information` SET serviceis='served' where id_number='"+txt.getText()+"'";//+id+"'";
                    stmt.executeUpdate(update);
                    // System.out.println("and statues='emergency'");
                }
                else{
                    String inss="select *from `clinicaldb`.`patient_information` where serviceis='ready' ORDER BY date,time DESC";// DESC";// ASC";//and profession='"+ob.profssion+"'";
                    ResultSet  r=stmt.executeQuery(inss);
                    int i=0,j=0;
                    while(r.next())
                    {
                        String ids = r.getString("id_number");
                        txt.setText(ids);

                        // txt.setText(ids);
                        pttable.getModel().setValueAt(r.getString(1), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(2), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(3), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(4), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(5), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(6), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(7), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(8), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(9), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(10), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(11), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(12), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(13), i, j);
                        j++;
                        pttable.getModel().setValueAt(r.getString(14), i, j);
                        j=0;
                        i++;
                    }
                    int m=0;
                    for(m=0;m<=2;m++)
                    {
                        Voice voice;
                        VoiceManager vm=VoiceManager.getInstance();
                        voice=vm.getVoice(voicename);
                        voice.allocate();
                        try{
                            voice.speak(txt.getText());
                        }catch(Exception e)
                        {
                            e.getCause();
                        }
                    }

                    String update="update `clinicaldb`.`patient_information` SET serviceis='served' where id_number='"+txt.getText()+"'";//+id+"'";
                    stmt.executeUpdate(update);
                }
            }
            else{
                lbl.setText("there is no scheduled patient");
            }

        }
        catch(NotBoundException e){
            System.out.println("HelloClient not bound exception:" +e);
            lbl.setText("HelloClient not bound exception:" +e.getMessage());
        }
        catch(Exception e){
            System.out.println("HelloClient exception:" +e);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        try{
            RMIInterface hello=(RMIInterface)
            Naming.lookup("//169.254.120.152/clinical");

            Class.forName("com.mysql.jdbc.Driver");
            String x="jdbc:mysql://localhost:3306/mysql?zeroDateTimeBehavior=convertToNull";
            String y="root";
            String z="vertrigo";
            Connection  con;
            con = DriverManager.getConnection(x, y, z);

            Statement stmt = con.createStatement();

            String ins="select *from `clinicaldb`.`patient_information`";// where serviceis='ready'";//where card_number='"+txt.getText()+"' and serviceis='served'";
            ResultSet  rs=stmt.executeQuery(ins);
            int c=0;
            while(rs.next())
            {
                c++;
            }
            if(c>=1)
            {
                //  String id = rs.getString("card_number");
                //lbl.setText(id);

                String select="select *from `clinicaldb`.`patient_information` ORDER BY time,date DESC";// where serviceis='ready'";// where card_number='"+txt.getText()+"'";//and profession='"+ob.profssion+"'";
                ResultSet  r=stmt.executeQuery(select);

                int i=0,j=0;
                while(r.next())
                {
                    pttable.getModel().setValueAt(r.getString(1), i, j);
                    j++;
                    pttable.getModel().setValueAt(r.getString(2), i, j);
                    j++;
                    pttable.getModel().setValueAt(r.getString(3), i, j);
                    j++;
                    pttable.getModel().setValueAt(r.getString(4), i, j);
                    j++;
                    pttable.getModel().setValueAt(r.getString(5), i, j);
                    j++;
                    pttable.getModel().setValueAt(r.getString(6), i, j);
                    j++;
                    pttable.getModel().setValueAt(r.getString(7), i, j);
                    j++;
                    pttable.getModel().setValueAt(r.getString(8), i, j);
                    j++;
                    pttable.getModel().setValueAt(r.getString(9), i, j);
                    j++;
                    pttable.getModel().setValueAt(r.getString(10), i, j);
                    j++;
                    pttable.getModel().setValueAt(r.getString(11), i, j);
                    j++;
                    pttable.getModel().setValueAt(r.getString(12), i, j);
                    j++;
                    pttable.getModel().setValueAt(r.getString(13), i, j);
                    j++;
                    pttable.getModel().setValueAt(r.getString(14), i, j);
                    j=0;
                    i++;
                }
                try {
                    Thread.sleep(3000);
                } catch(Exception e) {}
            }
            else{
                lbl.setText("there is no scheduled patient");
            }

        }
        catch(NotBoundException e){
            System.out.println("HelloClient not bound exception:" +e);
            lbl.setText("HelloClient not bound exception:" +e.getMessage());
        }
        catch(Exception e){
            System.out.println("HelloClient exception:" +e);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calling_Patients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calling_Patients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calling_Patients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calling_Patients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calling_Patients().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl;
    private javax.swing.JTable pttable;
    private javax.swing.JTextField txt;
    // End of variables declaration//GEN-END:variables
}
