


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author gech
 */
public class INVESTIGATION_PAGE extends javax.swing.JFrame {

    /**
     * Creates new form INVESTIGATION_PAGE
     */
    public INVESTIGATION_PAGE(String x, String y) {
        initComponents();
        display.setText(x);
        displayp.setText(y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jButton2 = new javax.swing.JButton();
        rgbtn = new javax.swing.JButton();
        se = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        pnm = new javax.swing.JTextField();
        rfn = new javax.swing.JTextField();
        rln = new javax.swing.JTextField();
        opo = new javax.swing.JTextField();
        se2 = new javax.swing.JComboBox();
        idfs = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        display = new javax.swing.JLabel();
        displayp = new javax.swing.JLabel();
        infoid = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1112, 693));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jDesktopPane1.setBackground(new java.awt.Color(204, 204, 204));

        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton2.setText("PERVIOUSE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jDesktopPane1.add(jButton2);
        jButton2.setBounds(110, 430, 135, 40);

        rgbtn.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        rgbtn.setText("REGISTER");
        rgbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rgbtnActionPerformed(evt);
            }
        });
        jDesktopPane1.add(rgbtn);
        rgbtn.setBounds(253, 430, 130, 40);

        se.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PARASITLOGY(STOOL EXAMINATION)", "BLOOD FILM", "MICROSCOPE EXAMINATION(URPNALYSYIS)", "CHEMICAL TEST", "CEROLOGY" }));
        se.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seActionPerformed(evt);
            }
        });
        jDesktopPane1.add(se);
        se.setBounds(360, 340, 280, 40);

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(51, 51, 51));
        jLabel11.setText("TEST TYPE");
        jDesktopPane1.add(jLabel11);
        jLabel11.setBounds(130, 340, 110, 30);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setText("OPO");
        jDesktopPane1.add(jLabel6);
        jLabel6.setBounds(130, 300, 100, 22);

        jLabel13.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(51, 51, 51));
        jLabel13.setText("REQUESTED LAST NAME");
        jDesktopPane1.add(jLabel13);
        jLabel13.setBounds(130, 250, 220, 22);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("REQUESTED FIRST NAME");
        jDesktopPane1.add(jLabel7);
        jLabel7.setBounds(130, 200, 230, 22);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setText("PATIENT NAME");
        jDesktopPane1.add(jLabel3);
        jLabel3.setBounds(130, 150, 200, 22);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("PATIENT_ID_NUMBER");
        jDesktopPane1.add(jLabel1);
        jLabel1.setBounds(130, 100, 210, 22);

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(51, 51, 51));
        jLabel10.setText("PLAN(INVESTIGATION)");
        jDesktopPane1.add(jLabel10);
        jLabel10.setBounds(270, 60, 245, 25);
        jDesktopPane1.add(id);
        id.setBounds(360, 90, 280, 35);

        pnm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pnmActionPerformed(evt);
            }
        });
        jDesktopPane1.add(pnm);
        pnm.setBounds(360, 140, 280, 35);

        rfn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rfnActionPerformed(evt);
            }
        });
        jDesktopPane1.add(rfn);
        rfn.setBounds(360, 190, 280, 35);
        jDesktopPane1.add(rln);
        rln.setBounds(360, 240, 280, 35);
        jDesktopPane1.add(opo);
        opo.setBounds(360, 290, 280, 35);

        se2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "WHERE DO YOU GO", "PREVIOUSE", "HISTORY REGISTRATION", "VIEW LAB RESULT", "LOGOUT" }));
        se2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                se2ItemStateChanged(evt);
            }
        });
        se2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                se2ActionPerformed(evt);
            }
        });
        jDesktopPane1.add(se2);
        se2.setBounds(400, 430, 170, 40);
        jDesktopPane1.add(idfs);
        idfs.setBounds(430, 20, 180, 40);

        jButton6.setText("SEARCH FOR UPDATE");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jDesktopPane1.add(jButton6);
        jButton6.setBounds(630, 20, 170, 40);
        jDesktopPane1.add(jPanel1);
        jPanel1.setBounds(10, 10, 820, 510);

        getContentPane().add(jDesktopPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, 840, 530));
        getContentPane().add(display, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 0, 120, 30));
        getContentPane().add(displayp, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 0, 130, 30));
        getContentPane().add(infoid, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 590, 80, 20));

        jMenu1.setText("                                  LOGOUT ");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        new SUMERY_PAGE(display.getText(), displayp.getText(), "").setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void seActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_seActionPerformed

    private void rgbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rgbtnActionPerformed


        Date d = new Date();
        SimpleDateFormat s = new SimpleDateFormat("yyyy-MM-dd");
        String date = s.format(d);
        String times;
//     new Timer(0,new ActionListener()
//     {
////      public void actionPerformed(ActionEvent e)
//      {
        Date dd = new Date();
        SimpleDateFormat s1 = new SimpleDateFormat("hh:mm:ss a");
        // tm.setText(s.format(d));
        times = s1.format(dd);
        // }
        //  }).start();
       try { Mainclass ob;
        ob = new Mainclass();
        ob.opo = opo.getText();
        ob.id_number = id.getText();
        ob.stool_examination = se.getSelectedItem().toString();
        ob.requested_first_name = rfn.getText();
        ob.requested_last_name = rln.getText();
        int history_id = 0;
        
            RMIInterface hello = (RMIInterface) Naming.lookup("//localhost/clinical");
            if (id.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER ID NUMBER",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
                id.setBorder(null);
                id.setHighlighter(null);
            } else if ((id.getText().length() < 2) || (id.getText().length() > 15)) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER VALID SIZE OF ID NUMBER",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
                rfn.setBorder(null);
                rfn.setHighlighter(null);
                rfn.setText("");
            } else if (rfn.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER FIRST NAME",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
                rfn.setBorder(null);
                rfn.setHighlighter(null);
            } else if ((rfn.getText().length() < 2) || (rfn.getText().length() > 15)) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER VALID SIZE OF FIRST NAME",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
                rfn.setBorder(null);
                rfn.setHighlighter(null);
                rfn.setText("");
            } else if (rln.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER LAST NAME",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
                rln.setBorder(null);
                rln.setHighlighter(null);
            } else if ((rln.getText().length() < 3) || (rln.getText().length() > 15)) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER VALID SIZE OF LAST NAME",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
                rln.setBorder(null);
                rln.setHighlighter(null);
                rln.setText("");
            } else if (opo.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER OPO",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
                opo.setBorder(null);
                opo.setHighlighter(null);
            } else if ((opo.getText().length() < 2) || (opo.getText().length() > 30)) {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER VALID SIZE OF OPO",
                        null,
                        JOptionPane.QUESTION_MESSAGE);
                opo.setBorder(null);
                opo.setHighlighter(null);
                opo.setText("");
            } else {
                System.out.println(hello.investigation_request(idfs.getText(),rgbtn.getText(),ob.id_number, history_id, ob.requested_first_name, ob.requested_last_name, ob.opo, ob.stool_examination));
                JOptionPane.showMessageDialog(null, "INVESTIGATION  REQUEST SUCCESS",
                        null,
                        JOptionPane.PLAIN_MESSAGE);
            }
        } catch (NotBoundException e) {
            System.out.println("Clinicalclient not bound exception:" + e);
            JOptionPane.showMessageDialog(null, "Clinicalclient not bound exception:" + e.getMessage(),
                    null,
                    JOptionPane.PLAIN_MESSAGE);
        } catch (Exception e) {
            System.out.println("HelloClient exception:" + e);
        }

    }//GEN-LAST:event_rgbtnActionPerformed

    private void pnmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pnmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pnmActionPerformed

    private void rfnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rfnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rfnActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated

        try {
            RMIInterface hello = (RMIInterface) Naming.lookup("//localhost/clinical");

            String fetch[] = new String[5000];
            fetch = hello.Update_examination1();
            int c = fetch.length;
            int i = 0, j = 0, idx = 0;
            if (c >= 1) {
                if (rgbtn.getText().equals("UPDATE")) {
                    rgbtn.setText("REGISTER");
                }
                while (i < c) {
                    infoid.setText(fetch[0]);
                    id.setText(fetch[1]);
                    String x = (fetch[3]);
                    rfn.setText("");
                    rln.setText("");
                    opo.setText("");
//                    int len = x.length();
//                    char[] cc = x.toCharArray();
//                    for (int h = 0; h < len - 2; h = h + 3) {
//                        char temp = cc[h];
//                        cc[h] = cc[h + 2];
//                        cc[h + 2] = temp;
//                    }
//                    x = String.valueOf(cc);
                    String y = (fetch[4]);

//                    cc = y.toCharArray();
//                    for (int h = 0; h < len - 2; h = h + 3) {
//                        char temp = cc[h];
//                        cc[h] = cc[h + 2];
//                        cc[h + 2] = temp;
//                    }
//                    y = String.valueOf(cc);
                    String z = x + "   " + y;
                    pnm.setText(z);
//                    hd.setText(fetch[11]);
//                   String blood= (fetch[10]);
//                //   blood presure=
//                   String first="";
//                    int length = blood.length();
//        char[] ccx = blood.toCharArray();
//        for (int h = 0; h < 16; h = h + 1) {
//            first = first + ccx[h];
//        }
//                   
//                        bp.setText(first);
//                        
//                              String firsts="";
//        char[] ccxs = blood.toCharArray();
//        for (int h = 16; h < 36; h = h + 1) {
//            firsts = firsts + ccxs[h];
//        }
//                   
//                        rr.setText(firsts);
//                        
//                        
//                          String firstss="";
//        char[] ccxss = blood.toCharArray();
//        for (int h = 36; h < 50; h = h + 1) {
//            firstss = firstss + ccxs[h];
//        }
//                   
//                        pr.setText(firstss);
//                        
//                       String firstsss="";
//        char[] ccxsss = blood.toCharArray();
//        for (int h = 50; h < 64; h = h + 1) {
//            firstsss = firstsss + ccxss[h];
//        }
//                   
//                        tmp.setText(firstsss); 

                    i++;
                }
//                    JOptionPane.showMessageDialog(null, "SUCCESSFULL", 
//                                              null,
//                                              JOptionPane.PLAIN_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "EMPTY",
                        null,
                        JOptionPane.PLAIN_MESSAGE);
            }
            // }
            infoid.setVisible(false);

        } catch (NotBoundException e) {
            System.out.println("Clinicalclient not bound exception:" + e);
            // lbl.setText("Clinicalclient not bound exception:" +e.getMessage());
        } catch (Exception e) {
            System.out.println("HelloClient exception:" + e);
        }
    }//GEN-LAST:event_formWindowActivated

    private void se2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_se2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_se2ActionPerformed

    private void se2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_se2ItemStateChanged
        if (se2.getSelectedItem().equals("PREVIOUSE")) {
            new SUMERY_PAGE(display.getText(), displayp.getText(), "").setVisible(true);
            this.setVisible(false);
        } else if (se2.getSelectedItem().equals("HISTORY REGISTRATION")) {
            new Register_pat_history(display.getText(), displayp.getText(), "").setVisible(true);
            this.setVisible(false);
        } else if (se2.getSelectedItem().equals("VIEW LAB RESULT")) {
            new View_pat_lab_result(display.getText(), displayp.getText()).setVisible(true);
            this.setVisible(false);
        } else if (se2.getSelectedItem().equals("LOGOUT")) {
            new LOGIN().setVisible(true);
            this.setVisible(false);
        } else if (se2.getSelectedItem().equals("WHERE DO YOU GO")) {
            JOptionPane.showMessageDialog(null, "PLEASE SELECT WHERE \nYOU WANT TO GO",
                    null,
                    JOptionPane.QUESTION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "PLEASE SELECT WHERE \nYOU WANT TO GO",
                    null,
                    JOptionPane.QUESTION_MESSAGE);
        }
    }//GEN-LAST:event_se2ItemStateChanged

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        try {
            RMIInterface hello = (RMIInterface) Naming.lookup("//localhost/clinical");

            String fetch[] = new String[5000];
            fetch = hello.Update_investigation(idfs.getText());
            int c = fetch.length;
            int i = 0, j = 0, idx = 0;
            if (c >= 1) {
                if (rgbtn.getText().equals("REGISTER")) {
                    rgbtn.setText("UPDATE");
                }

                while (i < c) {
                    infoid.setText(fetch[0]);
                    id.setText(fetch[1]);
                    rfn.setText(fetch[7]);

                    rln.setText(fetch[8]);

                    opo.setText(fetch[9]);
                    String investigation_request = fetch[10];
                    if (investigation_request.equals("PARASITLOGY(STOOL EXAMINATION)")) {
                        se.setSelectedItem("PARASITLOGY(STOOL EXAMINATION)");

                    } else if (investigation_request.equals("BLOOD FILM")) {
                        se.setSelectedItem("BLOOD FILM");

                    } else if (investigation_request.equals("MICROSCOPE EXAMINATION(URPNALYSYIS)")) {
                        se.setSelectedItem("MICROSCOPE EXAMINATION(URPNALYSYIS)");

                    } else if (investigation_request.equals("CHEMICAL TEST")) {
                        se.setSelectedItem("CHEMICAL TEST");

                    } else {
                        //                        PARASITLOGY(STOOL EXAMINATION)
//BLOOD FILM
//MICROSCOPE EXAMINATION(URPNALYSYIS)
//CHEMICAL TEST
//CEROLOGY
                        se.setSelectedItem("CEROLOGY");
                    }
//                    omry.setText(fetch[62]);
//                    assmnt.setText(fetch[63]);
                    // ausc.setText(fetch[42]);
                    // tmp.setText(fetch[14]);

                    //                    insps.setText(fetch[43]);
                    //                    plps.setText(fetch[44]);
                    //                    prcs.setText(fetch[45]);
                    //                    ascs.setText(fetch[46]);
                    // mth.setText(fetch[19]);
                    // pr.setText(fetch[13]);
                    // bp.setText(fetch[11]);
                    String x = (fetch[4]);
                    //                          int len = x.length();
                    //                            char[] cc = x.toCharArray();
                    //                            for (int h = 0; h < len - 2; h = h + 3) {
                    //                                char temp = cc[h];
                    //                                cc[h] = cc[h + 2];
                    //                                cc[h + 2] = temp;
                    //                            }
                    //                             x = String.valueOf(cc);
                    String y = (fetch[5]);

                    //                         cc = y.toCharArray();
                    //                            for (int h = 0; h < len - 2; h = h + 3) {
                    //                                char temp = cc[h];
                    //                                cc[h] = cc[h + 2];
                    //                                cc[h + 2] = temp;
                    //                            }
                    //                             y= String.valueOf(cc);
                    String z = x + "   " + y;
                    pnm.setText(z);
                    //                    hd.setText(fetch[11]);
                    //                   String blood= (fetch[10]);
                    //                //   blood presure=
                    //                   String first="";
                    //                    int length = blood.length();
                    //        char[] ccx = blood.toCharArray();
                    //        for (int h = 0; h < 16; h = h + 1) {
                    //            first = first + ccx[h];
                    //        }
                    //
                    //                        bp.setText(first);
                    //
                    //                              String firsts="";
                    //        char[] ccxs = blood.toCharArray();
                    //        for (int h = 16; h < 36; h = h + 1) {
                    //            firsts = firsts + ccxs[h];
                    //        }
                    //
                    //                        rr.setText(firsts);
                    //
                    //
                    //                          String firstss="";
                    //        char[] ccxss = blood.toCharArray();
                    //        for (int h = 36; h < 50; h = h + 1) {
                    //            firstss = firstss + ccxs[h];
                    //        }
                    //
                    //                        pr.setText(firstss);
                    //
                    //                       String firstsss="";
                    //        char[] ccxsss = blood.toCharArray();
                    //        for (int h = 50; h < 64; h = h + 1) {
                    //            firstsss = firstsss + ccxss[h];
                    //        }
                    //
                    //                        tmp.setText(firstsss);

                    i++;
                }
                //                    JOptionPane.showMessageDialog(null, "SUCCESSFULL",
                //                                              null,
                //                                              JOptionPane.PLAIN_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "EMPTY",
                        null,
                        JOptionPane.PLAIN_MESSAGE);
            }
            // }
            infoid.setVisible(false);

        } catch (NotBoundException e) {
            System.out.println("Clinicalclient not bound exception:" + e);
            // lbl.setText("Clinicalclient not bound exception:" +e.getMessage());
        } catch (Exception e) {
            System.out.println("HelloClient exception:" + e);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        new LOGIN().setVisible(true);
       this.setVisible(false);
    }//GEN-LAST:event_jMenu1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(INVESTIGATION_PAGE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(INVESTIGATION_PAGE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(INVESTIGATION_PAGE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(INVESTIGATION_PAGE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new INVESTIGATION_PAGE("", "").setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel display;
    private javax.swing.JLabel displayp;
    private javax.swing.JTextField id;
    private javax.swing.JTextField idfs;
    private javax.swing.JLabel infoid;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton6;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField opo;
    private javax.swing.JTextField pnm;
    private javax.swing.JTextField rfn;
    private javax.swing.JButton rgbtn;
    private javax.swing.JTextField rln;
    private javax.swing.JComboBox se;
    private javax.swing.JComboBox se2;
    // End of variables declaration//GEN-END:variables
}
